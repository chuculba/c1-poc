<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/blueprint"
   xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
   xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
   xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
   xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
    http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

	<!-- set timeouts -->
    <http-conf:conduit name="*.http-conduit">
        <http-conf:client ReceiveTimeout="2000" ConnectionTimeout="2000" />
    </http-conf:conduit>

	<!-- CXF endpoints -->
	<cxf:cxfEndpoint id="addressEndpoint" address="http://localhost:8185/address"
		serviceClass="org.poc.ws.AddressEndpoint" xmlns:ns="suncorp-com-au:schema:enterprise:getaddress:2012:05" />

	<cxf:cxfEndpoint id="BBBEndpoint" address="http://localhost:8186/BBB" wsdlURL="wsdl/BBB.wsdl"/>

	<cxf:cxfEndpoint id="CCCEndpoint" address="http://localhost:8187/CCC" wsdlURL="wsdl/CCC.wsdl"/>

	<!-- Transformers -->
	<bean id="aggregateResponseStrategy" class="org.poc.transformer.AggregateResponseStrategy" />
	<bean id="addRootElementTransformer" class="org.poc.transformer.AddRootElementTransformer" />

	<!-- Exception thrown if there are no responses -->
	<bean id="soapException" class="javax.xml.soap.SOAPException">
		<argument index="0" value="No Responses From Service"/>
	</bean>

	<!-- WMQ Queue connections -->
	<bean id="wsjms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory" ref="WMQConnectionFactory" />
	</bean>

	<bean id="WMQConnectionFactory"
		class="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter">
		<property name="targetConnectionFactory">
			<bean class="com.ibm.mq.jms.MQQueueConnectionFactory">
				<property name="transportType" value="1" />
				<property name="queueManager" value="devqueuemanager" />
				<property name="hostName" value="localhost" />
				<property name="port" value="1414" />
				<property name="channel" value="SYSTEM.DEF.SVRCONN" />
				<property name="targetClientMatching" value="true" />
				<property name="useConnectionPooling" value="true" />
			</bean>
		</property>
	</bean>


	<camelContext id="address-service-context"	xmlns="http://camel.apache.org/schema/blueprint">

		<!-- When we get a timeout we continue processing so we can add a warning to the message -->
		<onException>
			<exception>java.net.SocketTimeoutException</exception>
			<continued>
				<constant>true</constant>
			</continued>
		</onException>

		<route id="addressRoute">
			<from uri="cxf:bean:addressEndpoint?dataFormat=MESSAGE" />
			<convertBodyTo type="java.lang.String" />
			<log message="Incoming message ${body}" />

			<!-- Split all the messages -->
			<to uri="xslt:xsl/ConsumerSplitTransform.xsl?saxon=true" />

			<split streaming="true" parallelProcessing="true"
				strategyRef="aggregateResponseStrategy">
				<tokenize token="Service" xml="true" />
				<log message="Service ${body}" />
				<choice>
					<when>
						<xpath>//SystemID/text() = 'AAA'</xpath>
						<log message="Service AAA ${body}" />
						<to uri="bean:addRootElementTransformer" />
						<setHeader headerName="correlationId">
							<simple>${id}</simple>
						</setHeader>
						<setHeader headerName="userId">
							<simple>wbmuserAAA</simple>
						</setHeader>
						<setHeader headerName="password">
							<simple>passwordAAA</simple>
						</setHeader>
						<doTry>						
							<to uri="bean:addRootElementTransformer" />
							<to uri="xslt:xsl/AAARequestTransform.xsl" />
							<to uri="wsjms:SERVICE.AAA.IN?replyTo=SERVICE.AAA.OUT&amp;requestTimeout=60s" />							
							<to uri="xslt:xsl/AAAResponseTransform.xsl" />
							<doCatch>
								<exception>java.net.SocketTimeoutException</exception>
								<setHeader headerName="description">
									<simple>Exception thrown AAA ${exception.message}</simple>
								</setHeader>												
								<to uri="direct:handleCustomException"/>														
							</doCatch>
						</doTry>																			
						<log message="From AAA Transformed ${body}" />
					</when>
					<when>
						<xpath>//SystemID/text() = 'BBB'</xpath>
						<log message="Message in to BBB Aggregation ${id}" />
						<setHeader headerName="serviceId">
							<simple>BBB</simple>
						</setHeader>

						<doTry>
							<to uri="bean:addRootElementTransformer" />
							<to uri="xslt:xsl/BBBRequestTransform.xsl" />
							<to	uri="cxf:bean:BBBEndpoint?dataFormat=MESSAGE" />
							<to uri="xslt:xsl/BBBResponseTransform.xsl" />
							<doCatch>
								<exception>java.net.SocketTimeoutException</exception>
								<setHeader headerName="description">
									<simple>Exception thrown BBB ${exception.message}</simple>
								</setHeader>												
								<to uri="direct:handleCustomException"/>														
							</doCatch>
						</doTry>																			
						<log message="From BBB Transformed ${body}" />
					</when>
					<when>
						<xpath>//SystemID/text() = 'CCC'</xpath>
						<setHeader headerName="serviceId">
							<simple>CCC</simple>
						</setHeader>

						<split streaming="true" parallelProcessing="true" strategyRef="aggregateResponseStrategy">
							<tokenize token="Product" xml="true" />
							<log message="CCC Product ${body}" />							
							<doTry>
								<to uri="bean:addRootElementTransformer" />
								<to uri="xslt:xsl/CCCRequestTransform.xsl" />
								<to	uri="cxf:bean:CCCEndpoint?dataFormat=MESSAGE" />
								<to uri="xslt:xsl/CCCResponseTransform.xsl" />
								<doCatch>
									<exception>java.net.SocketTimeoutException</exception>							
									<setHeader headerName="description">
										<simple>Exception thrown CCC ${exception.message}</simple>
									</setHeader>												
									<to uri="direct:handleCustomException"/>														
								</doCatch>											
							</doTry>										
							<log message="From CCC Transformed ${body}" />
						</split>
					</when>
				</choice>
			</split>

			<!-- Comes back from the split here -->
			<log message="From Routes Response ${body}" />
			<to uri="bean:addRootElementTransformer" />			
			<to uri="xslt:xsl/ConsumerResponseTransform.xsl" />
			<log message="The Full Response ${body}" />
			
			<!-- if there are no valid responses in the message throw a soap fault -->
			<choice>
				<when>
					<xpath>boolean(//*:ProductSystemCustomer/text())=false()</xpath>
					<log message="==== FAILURE ==== ProductSystemCustomer in ${body}" />
					<throwException ref="soapException"/>				
				</when>
				<otherwise>
					<log message="==== OK ==== ProductSystemCustomer in ${body}" />
				</otherwise>						
			</choice>
			
			
						
			<!-- Otherwise return responses -->			
		</route>

		<!-- Add the caught exception to the outgoing message as a warning -->
		<route id="CustomExceptionHandling">
			<from uri="direct:handleCustomException" />
			<setHeader headerName="number">
				<simple>id</simple>
			</setHeader>
			<setHeader headerName="source">
				<simple>${header.serviceId}</simple>
			</setHeader>
			<log message="Exception thrown in service ${header.source} Description ${header.description} Message ID ${header.number}" />
			<to uri="bean:addRootElementTransformer" />					
			<to uri="xslt:xsl/ErrorResponseTransform.xsl" />
			<log message="The Exception Response ${body}" />			
		</route>



	</camelContext>


</blueprint>